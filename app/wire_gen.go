// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package app

import (
	"github.com/kyawmyintthein/rzlog"
	"github.com/kyawmyintthein/twirp-poc/app/devliery/rpcv1"
	"github.com/kyawmyintthein/twirp-poc/app/domain/usecase/v1"
	"github.com/kyawmyintthein/twirp-poc/app/infrastructure"
	"github.com/kyawmyintthein/twirp-poc/app/injector"
)

// Injectors from wire.go:

func New(configFilePath string) (*twripApp, error) {
	globalCfg, err := injector.ProvideGlobalConfig(configFilePath)
	if err != nil {
		return nil, err
	}
	logCfg := injector.ProvideLogConfig(globalCfg)
	logger := rzlog.Init(logCfg)
	session, err := injector.ProvideAWSSession(globalCfg)
	if err != nil {
		return nil, err
	}
	client, err := injector.ProvideDynamdbCfgClient(globalCfg, logger, session)
	if err != nil {
		return nil, err
	}
	server := injector.ProvideHTTPServer(globalCfg)
	redisCfg := injector.ProvideRedisConfig(globalCfg)
	cmdable, err := infrastructure.NewRedisClient(redisCfg)
	if err != nil {
		return nil, err
	}
	cache, err := infrastructure.NewRedisCache(redisCfg, cmdable)
	if err != nil {
		return nil, err
	}
	dynamodb := injector.ProvideDynamodb(globalCfg, session)
	userUC := ucv1.ProvideUserUC(globalCfg)
	userServce := rpcv1.NewUserServiceRPCImpl(globalCfg, userUC)
	appTwripApp := &twripApp{
		cfg:         globalCfg,
		cfgCli:      client,
		logger:      logger,
		httpServer:  server,
		redisClient: cmdable,
		cache:       cache,
		session:     session,
		dynamodb:    dynamodb,
		userRPC:     userServce,
		userUC:      userUC,
	}
	return appTwripApp, nil
}
